AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  BucketName:
    Type: String
  ObjectKey:
    Type: String
  LayerBucketName:
    Type: String
  LayerObjectKey:
    Type: String
  ProjectName:
    Type: String
  LambdaRuntime:
    Type: String
  LambdaTimeout:
    Type: String
  LambdaMemory:
    Type: Number
    MinValue: 128
    MaxValue: 3008
  EmailAccount:
    Type: 'AWS::SSM::Parameter::Value<String>'
Resources:
  Function: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${ProjectName}-lambda-function
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Ref Layer
      Code: 
        S3Bucket: !Ref BucketName
        S3Key: !Ref ObjectKey
      Runtime: !Ref LambdaRuntime
      MemorySize: !Ref LambdaMemory
      Timeout: !Ref LambdaTimeout
      Tags:
      - Key: "projeto"
        Value: !Ref ProjectName
  Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
      Content:
        S3Bucket: !Ref LayerBucketName
        S3Key: !Ref LayerObjectKey
      LayerName: !Sub ${ProjectName}-lambda-layer
      LicenseInfo: MIT
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:DescribeStackResources"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:GetTemplate"
                  - "cloudformation:ListStackResources"
                  - "cloudwatch:*"
                  - "dynamodb:*"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcs"
                  - "events:*"
                  - "iam:GetPolicy"
                  - "iam:GetPolicyVersion"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListRolePolicies"
                  - "iam:ListRoles"
                  - "iam:PassRole"
                  - "kinesis:DescribeStream"
                  - "kinesis:ListStreams"
                  - "kinesis:PutRecord"
                  - "kms:ListAliases"
                  - "lambda:*"
                  - "logs:*"
                  - "s3:*"
                  - "sns:ListSubscriptions"
                  - "sns:ListSubscriptionsByTopic"
                  - "sns:ListTopics"
                  - "sns:Publish"
                  - "sns:Subscribe"
                  - "sns:Unsubscribe"
                  - "sqs:ListQueues"
                  - "sqs:SendMessage"
                  - "tag:GetResources"
                  - "xray:PutTelemetryRecords"
                  - "xray:PutTraceSegments"
                Resource: '*'
      MaxSessionDuration: 3600 
      Tags:
      - Key: "projeto"
        Value: !Ref ProjectName
  Scheduler:
    Type: AWS::Events::Rule
    Properties: 
      EventBusName: default
      Name: !Ref ProjectName
      ScheduleExpression: "cron(56 23 * * ? *)"
      State: ENABLED
      Targets: 
        - 
          Arn: !GetAtt Function.Arn
          Id: !Sub ${ProjectName}-target
  SchedulerInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref Function
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt Scheduler.Arn
  SuccessTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${ProjectName}-success-topic
      Subscription:
        - Endpoint: !Ref EmailAccount
          Protocol: email
      TopicName: !Sub ${ProjectName}-success-topic
      Tags:
      - Key: "projeto"
        Value: !Ref ProjectName
  FailureTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Sub ${ProjectName}-failure-topic
      Subscription:
        - Endpoint: !Ref EmailAccount
          Protocol: email
      TopicName: !Sub ${ProjectName}-failure-topic
      Tags:
      - Key: "projeto"
        Value: !Ref ProjectName
  FunctionDestination:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      DestinationConfig:
          OnFailure:
            Destination: !Ref FailureTopic
          OnSuccess:
            Destination: !Ref SuccessTopic
      FunctionName: !Ref Function
      MaximumEventAgeInSeconds: 300
      MaximumRetryAttempts: 1
      Qualifier: $LATEST